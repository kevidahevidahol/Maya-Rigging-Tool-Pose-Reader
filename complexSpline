import maya.cmds as cmds

selection = cmds.ls(sl=1) 
cmds.select(selection,hi=1)
jntSel = cmds.ls(sl=1)
cmds.joint(jntSel[-1],e=1,oj='none',zso=1);
ctGrp = []
ikChain = cmds.duplicate(jntSel[0],rc=1)
blendChain = cmds.duplicate(jntSel[0],rc=1)
ikChain_pos = []
for jnt in jntSel:
    grp = cmds.group(em=1, n='orientGrp_'+str(jnt))
    circ = cmds.circle(r=1,c=(0,0,0),ch=0,nr=(1,0,0),n=str(jnt)+'_CTRL')
    jointTransform = cmds.xform(jnt,q=1,t=1,ws=1)
    jointRotation = cmds.xform(jnt,q=1,ro=1,ws=1)
    cmds.xform(grp,ws=1,t=(jointTransform[0],jointTransform[1],jointTransform[2]),ro=(jointRotation[0],jointRotation[1],jointRotation[2]))
    cmds.xform(circ,ws=1,t=(jointTransform[0],jointTransform[1],jointTransform[2]),ro=(jointRotation[0],jointRotation[1],jointRotation[2]))
    cmds.parentConstraint(circ,jnt)
    cmds.scaleConstraint(circ,jnt)
    ctGrp.append(grp)
    ctGrp.append(circ)
    ikChain_pos.append(jointTransform)

ikStartT = cmds.xform(jntSel[0],q=1,ws=1,t=1)
ikStartR = cmds.xform(jntSel[0],q=1,ws=1,ro=1)
ikEndT = cmds.xform(jntSel[-1],q=1,ws=1,t=1)
ikEndR = cmds.xform(jntSel[-1],q=1,ws=1,ro=1)
ikStart = cmds.joint(p=ikStartT,n='start_ctl_jnt')
ikEnd = cmds.joint(p=ikEndT,n='end_ctl_jnt') 
cmds.parent(ikEnd,w=1)   
cmds.parent(ikStart,w=1)
ikCTRL = cmds.curve(d=1,p=[(-1,0,-1),(-1,0,1),(1,0,1),(1,0,-1),(-1,0,-1)],k=[0,1,2,3,4],name='splineIK_CTRL')
lastJointTranslate = cmds.xform(jntSel[-1],q=1,ws=1,t=1)
lastJointRotation = cmds.xform(jntSel[-1],q=1,ws=1,ro=1)
cmds.xform(ikCTRL,ws=1,t=(lastJointTranslate[0],lastJointTranslate[1],lastJointTranslate[2]),ro=(lastJointRotation[0],lastJointRotation[1],lastJointRotation[2]))
cmds.makeIdentity(ikCTRL,a=1,t=1,r=1)
cmds.addAttr(ikCTRL,k=1,ln='ik_fk_blend',min=0,max=1)
for j in range(1,len(ctGrp)):
    j1 = -(j)
    j2 = -(j+1)
    cmds.parent(ctGrp[j1],ctGrp[j2])
    
cmds.select(ikChain,hi=1)
ikSel = cmds.ls(sl=1)
newIkSel = []
for ik in range(0,len(ikSel)):
    newName = cmds.rename(ikSel[ik],'ik_jnt_'+str(ik+1))
    newIkSel.append(newName)

ikH_crv = cmds.curve(d=1,p=ikChain_pos[0],n='ik_handle_crv')
for i in range(1,len(ikChain_pos)):
    cmds.curve(ikH_crv,a=1,p=ikChain_pos[i])
cmds.skinCluster(ikStart,ikEnd,ikH_crv)
splineikH = cmds.ikHandle(sj=newIkSel[0],ee=newIkSel[-1],sol='ikSplineSolver',ccv=0,scv=0,n='spline_ikH',c=ikH_crv)
cmds.parentConstraint(ikCTRL,ikEnd,mo=1)

cmds.select(blendChain,hi=1)
blendSel = cmds.ls(sl=1)
newBlendSel=[]
for b in range(0,len(blendSel)):
    newNameB = cmds.rename(blendSel[b],'bind_jnt_'+str(b+1))
    newBlendSel.append(newNameB)
    blendColorR = cmds.shadingNode('blendColors',asUtility=1,n='spline_blend_rotation_'+str(b+1))
    cmds.connectAttr(ikCTRL+'.ik_fk_blend',blendColorR+'.blender')
    cmds.connectAttr(newIkSel[b]+'.rotate',blendColorR + '.color1')
    cmds.connectAttr(jntSel[b]+'.rotate',blendColorR + '.color2')
    cmds.connectAttr(blendColorR +'.output',newBlendSel[b] + '.rotate')
    blendColorT = cmds.shadingNode('blendColors',asUtility=1,n='spline_blend_translation_'+str(b+1))
    cmds.connectAttr(ikCTRL+'.ik_fk_blend',blendColorT+'.blender')
    cmds.connectAttr(newIkSel[b]+'.translate',blendColorT + '.color1')
    cmds.connectAttr(jntSel[b]+'.translate',blendColorT + '.color2')
    cmds.connectAttr(blendColorT +'.output',newBlendSel[b] + '.translate')
   
